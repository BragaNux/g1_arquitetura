services:
  # =====================
  # Users Service
  # =====================
  users-db:
    image: postgres:16
    container_name: users-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: usersdb
    volumes:
      - users_pgdata:/var/lib/postgresql/data
    networks: [app-network]
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  users-service:
    build: ./users-service
    container_name: users-service
    environment:
      DATABASE_URL: postgresql://postgres:postgres@users-db:5432/usersdb
    depends_on:
      users-db:
        condition: service_healthy
    ports:
      - "3004:3004"
    networks: [app-network]

  # =====================
  # Products Service
  # =====================
  products-db:
    image: postgres:16
    container_name: products-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: productsdb
    volumes:
      - products_pgdata:/var/lib/postgresql/data
    networks: [app-network]
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  products-service:
    build: ./products-service
    container_name: products-service
    environment:
      DATABASE_URL: postgresql://postgres:postgres@products-db:5432/productsdb
    depends_on:
      products-db:
        condition: service_healthy
    ports:
      - "3001:3001"
    networks: [app-network]

  # =====================
  # Payments Service
  # =====================
  payments-db:
    image: postgres:16
    container_name: payments-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: paymentsdb
    volumes:
      - payments_pgdata:/var/lib/postgresql/data
    networks: [app-network]
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  payments-service:
    build: ./payments-service
    container_name: payments-service
    environment:
      DATABASE_URL: postgresql://postgres:postgres@payments-db:5432/paymentsdb
    depends_on:
      payments-db:
        condition: service_healthy
      users-service:
        condition: service_started
      products-service:
        condition: service_started
      orders-service:
        condition: service_started
    ports:
      - "3003:3003"
    networks: [app-network]

  # =====================
  # Orders Service (MongoDB)
  # =====================
  orders-db:
    image: mongo:7
    container_name: orders-db
    volumes:
      - orders_mongodata:/data/db
    networks: [app-network]
    ports:
      - "27017:27017"
    # (opcional) healthcheck para o Mongo
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  orders-service:
    build: ./orders-service
    container_name: orders-service
    environment:
      # use SEMPRE env no c√≥digo (ver nota abaixo)
      MONGO_URL: mongodb://orders-db:27017/orders
    depends_on:
      orders-db:
        condition: service_healthy
    ports:
      - "3002:3002"
    networks: [app-network]

volumes:
  users_pgdata:
  products_pgdata:
  payments_pgdata:
  orders_mongodata:

networks:
  app-network:
    driver: bridge
