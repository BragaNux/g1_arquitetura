{
  "info": {
    "name": "G1 - Microservices (Users, Products, Orders, Payments)",
    "_postman_id": "9f8a6d3e-0000-4a4a-bbbb-111122223333",
    "description": "Collection para testar os microserviços Users, Products, Orders (Mongo) e Payments. Inclui variáveis, encadeamento e testes básicos.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "usersBase", "value": "http://localhost:3004" },
    { "key": "productsBase", "value": "http://localhost:3001" },
    { "key": "ordersBase", "value": "http://localhost:3002" },
    { "key": "paymentsBase", "value": "http://localhost:3003" },
    { "key": "userId", "value": "" },
    { "key": "productId", "value": "" },
    { "key": "orderId", "value": "" },
    { "key": "paymentId", "value": "" }
  ],
  "item": [
    {
      "name": "Users Service",
      "item": [
        {
          "name": "List Users",
          "request": {
            "method": "GET",
            "url": { "raw": "{{usersBase}}/users" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "pm.test('Body is array', () => Array.isArray(pm.response.json()));"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Brayan\",\n  \"email\": \"brayan@example.com\"\n}" },
            "url": { "raw": "{{usersBase}}/users" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('201 Created', () => pm.response.code === 201);",
              "const j = pm.response.json();",
              "pm.expect(j).to.have.property('id');",
              "pm.collectionVariables.set('userId', String(j.id));"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "url": { "raw": "{{usersBase}}/users/{{userId}}" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "pm.test('ID confere', () => pm.response.json().id == pm.collectionVariables.get('userId'));"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Notify User",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"message\": \"Seu pagamento foi aprovado.\"\n}" },
            "url": { "raw": "{{usersBase}}/users/{{userId}}/notify" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "pm.test('success true', () => pm.response.json().success === true);"
            ], "type": "text/javascript" } }
          ]
        }
      ]
    },
    {
      "name": "Products Service",
      "item": [
        {
          "name": "List Products",
          "request": {
            "method": "GET",
            "url": { "raw": "{{productsBase}}/products" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "pm.test('Body is array', () => Array.isArray(pm.response.json()));"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Create Product",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Mouse Gamer\",\n  \"price\": 199.90,\n  \"stock\": 10\n}" },
            "url": { "raw": "{{productsBase}}/products" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('201 Created', () => pm.response.code === 201);",
              "const j = pm.response.json();",
              "pm.expect(j).to.have.property('id');",
              "pm.collectionVariables.set('productId', String(j.id));"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "url": { "raw": "{{productsBase}}/products/{{productId}}" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "pm.test('ID confere', () => pm.response.json().id == pm.collectionVariables.get('productId'));"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Update Product (name/price only)",
          "request": {
            "method": "PUT",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Mouse Gamer RGB\",\n  \"price\": 229.90\n}" },
            "url": { "raw": "{{productsBase}}/products/{{productId}}" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Update Stock",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"stock\": 20\n}" },
            "url": { "raw": "{{productsBase}}/products/{{productId}}/estoque" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "pm.test('Stock >= 0', () => pm.response.json().stock >= 0);"
            ], "type": "text/javascript" } }
          ]
        }
      ]
    },
    {
      "name": "Orders Service (Mongo)",
      "item": [
        {
          "name": "Create Order",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"clientId\": {{userId}},\n  \"products\": [\n    { \"productId\": {{productId}}, \"quantity\": 2 }\n  ]\n}"
            },
            "url": { "raw": "{{ordersBase}}/order-service/v1/orders" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('201 Created', () => pm.response.code === 201);",
              "const j = pm.response.json();",
              "pm.expect(j).to.have.property('_id');",
              "pm.collectionVariables.set('orderId', String(j._id));"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "List Orders",
          "request": { "method": "GET", "url": { "raw": "{{ordersBase}}/order-service/v1/orders" } },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Get Order by ID",
          "request": { "method": "GET", "url": { "raw": "{{ordersBase}}/order-service/v1/orders/{{orderId}}" } },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "pm.test('ID confere', () => pm.response.json()._id === pm.collectionVariables.get('orderId'));"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Update Order Status (manual)",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"status\": \"PAGO\"\n}" },
            "url": { "raw": "{{ordersBase}}/order-service/v1/orders/{{orderId}}/status" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);"
            ], "type": "text/javascript" } }
          ]
        }
      ]
    },
    {
      "name": "Payments Service",
      "item": [
        {
          "name": "Create Payment",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"amount\": 199.90\n}"
            },
            "url": { "raw": "{{paymentsBase}}/payments" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('201 Created', () => pm.response.code === 201);",
              "const j = pm.response.json();",
              "pm.expect(j).to.have.property('id');",
              "pm.collectionVariables.set('paymentId', String(j.id));"
            ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Process Payment",
          "request": {
            "method": "PATCH",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": { "raw": "{{paymentsBase}}/payments/{{paymentId}}/process" }
          },
          "event": [
            { "listen": "test", "script": { "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);"
            ], "type": "text/javascript" } }
          ]
        }
      ]
    }
  ]
}
